import java.util.Scanner;

public class Main {
    public int displayMenuAndGetOption(Scanner scanner) {
        System.out.println("Menu:");
        System.out.println("1. Create Donation");
        System.out.println("2. Read Donations");
        System.out.println("3. Update Donation");
        System.out.println("4. Delete Donation");
        System.out.println("5. Exit");
        System.out.print("Choose an option: ");
        return scanner.nextInt();
    }

    public static void main(String[] args) {
        DonationsSystem.main(args);
    }
}

---------------------------------------------------------------

public class DonationManagement {
    private String date;
    private String money;
    private String food;
    private String clothes;

    public DonationManagement(String date, String money, String food, String clothes) {
        this.date = date;
        this.money = money;
        this.food = food;
        this.clothes = clothes;
    }

    public String getDate() {
        return date;
    }

    public void setDate(String date) {
        this.date = date;
    }

    public String getMoney() {
        return money;
    }

    public void setMoney(String money) {
        this.money = money;
    }

    public String getFood() {
        return food;
    }

    public void setFood(String food) {
        this.food = food;
    }

    public String getClothes() {
        return clothes;
    }

    public void setClothes(String clothes) {
        this.clothes = clothes;
    }

    @Override
    public String toString() {
        return "Date=" + date + "\nMoney=" + money + "\nFood=" + food + "\nClothes=" + clothes;
    }

    public String toDisplayString() {
        return "Date: " + date + "\nMoney: " + money + "\nFood: " + food + "\nClothes: " + clothes;
    }
}

-------------------------------------------------------------------

import java.io.*;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class DonationsSystem {

    private static final String DATA_FILE = "donations.txt";
    private static List<DonationManagement> donations = new ArrayList<>();

    public static void main(String[] args) {
        loadDataFromFile();

        Scanner scanner = new Scanner(System.in);
        Main menu = new Main();

        while (true) {
            int option = menu.displayMenuAndGetOption(scanner);
            scanner.nextLine(); // Clear buffer

            switch (option) {
                case 1:
                    createDonation(scanner);
                    break;
                case 2:
                    readDonations(scanner);
                    break;
                case 3:
                    updateDonation(scanner);
                    break;
                case 4:
                    deleteDonation(scanner);
                    break;
                case 5:
                    System.out.println("Exiting the system...");
                    saveDataToFile();
                    System.exit(0);
                default:
                    System.out.println("Invalid option. Try again.");
            }
        }
    }

    private static void loadDataFromFile() {
        try (FileReader reader = new FileReader(DATA_FILE)) {
            Scanner fileScanner = new Scanner(reader);
            while (fileScanner.hasNextLine()) {
                String line = fileScanner.nextLine();
                String[] data = line.split(",");
                if (data.length == 4) { // Check if there are exactly 4 elements in the array
                    String date = data[0].split("=")[1];
                    String money = data[1].split("=")[1];
                    String food = data[2].split("=")[1];
                    String clothes = data[3].split("=")[1];

                    DonationManagement donation = new DonationManagement(date, money, food, clothes);
                    donations.add(donation);
                } else {
                    System.err.println("Incomplete data in line: " + line);
                }
            }
        } catch (IOException e) {
            System.err.println("Error loading data from file: " + e.getMessage());
        }
    }

    private static void saveDataToFile() {
        try (FileWriter writer = new FileWriter(DATA_FILE)) {
            int totalMoney = 0;
            int totalFood = 0;
            int totalClothes = 0;

            for (DonationManagement donation : donations) {
                writer.write("Donation on the date = " + donation.getDate() + "\n");
                writer.write("Money = " + donation.getMoney() + "\n");
                writer.write("Food = " + donation.getFood() + "\n");
                writer.write("Clothes = " + donation.getClothes() + "\n");
                writer.write("\n");

                totalMoney += Integer.parseInt(donation.getMoney());
                totalFood += Integer.parseInt(donation.getFood());
                totalClothes += Integer.parseInt(donation.getClothes());
            }

            writer.write("*Totals:*\n");
            writer.write("Money: " + totalMoney + "\n");
            writer.write("Food: " + totalFood + "\n");
            writer.write("Clothes: " + totalClothes + "\n");

        } catch (IOException e) {
            System.err.println("Error saving data to file: " + e.getMessage());
        }
    }

    private static void createDonation(Scanner scanner) {
        System.out.println("Creating a new donation:");

        System.out.print("Date (dd/mm/yyyy): ");
        String date = scanner.nextLine();

        System.out.print("Money: ");
        String money = scanner.nextLine();

        System.out.print("Food: ");
        String food = scanner.nextLine();

        System.out.print("Clothes: ");
        String clothes = scanner.nextLine();

        DonationManagement donation = new DonationManagement(date, money, food, clothes);
        donations.add(donation);

        System.out.println("Donation saved successfully!");

        saveDataToFile();
    }

    private static void readDonations(Scanner scanner) {
        if (donations.isEmpty()) {
            System.out.println("No donations registered.");
            return;
        }

        System.out.println("List of Donations:");

        for (DonationManagement donation : donations) {
            System.out.println(donation.toDisplayString());
        }

        int totalMoney = 0;
        int totalFood = 0;
        int totalClothes = 0;

        for (DonationManagement donation : donations) {
            totalMoney += Integer.parseInt(donation.getMoney());
            totalFood += Integer.parseInt(donation.getFood());
            totalClothes += Integer.parseInt(donation.getClothes());
        }

        System.out.println("\n*Totals:*");
        System.out.println("Money: " + totalMoney);
        System.out.println("Food: " + totalFood);
        System.out.println("Clothes: " + totalClothes);
    }

    private static void updateDonation(Scanner scanner) {
        if (donations.isEmpty()) {
            System.out.println("No donations registered to update.");
            return;
        }

        showDonationsWithNumbering();

        System.out.print("Enter the number of the donation to be updated: ");
        int donationIndex = scanner.nextInt() - 1;
        scanner.nextLine(); // Clear buffer

        if (donationIndex < 0 || donationIndex >= donations.size()) {
            System.out.println("Invalid index. Try again.");
            return;
        }

        DonationManagement donation = donations.get(donationIndex);

        System.out.print("Date (" + donation.getDate() + "): ");
        String date = scanner.nextLine();
        if (!date.isEmpty()) {
            donation.setDate(date);
        }

        System.out.print("Money (" + donation.getMoney() + "): ");
        String money = scanner.nextLine();
        if (!money.isEmpty()) {
            donation.setMoney(money);
        }

        System.out.print("Food (" + donation.getFood() + "): ");
        String food = scanner.nextLine();
        if (!food.isEmpty()) {
            donation.setFood(food);
        }

        System.out.print("Clothes (" + donation.getClothes() + "): ");
        String clothes = scanner.nextLine();
        if (!clothes.isEmpty()) {
            donation.setClothes(clothes);
        }

        System.out.println("Donation updated successfully!");

        saveDataToFile();
    }

    private static void deleteDonation(Scanner scanner) {
        if (donations.isEmpty()) {
            System.out.println("No donations registered to delete.");
            return;
        }

        showDonationsWithNumbering();

        System.out.print("Enter the number of the donation to be deleted: ");
        int donationIndex = scanner.nextInt() - 1;
        scanner.nextLine(); // Clear buffer

        if (donationIndex < 0 || donationIndex >= donations.size()) {
            System.out.println("Invalid index. Try again.");
            return;
        }

        donations.remove(donationIndex);
        System.out.println("Donation deleted successfully!");

        saveDataToFile();
    }

    private static void showDonationsWithNumbering() {
        for (int i = 0; i < donations.size(); i++) {
            System.out.println((i + 1) + ". " + donations.get(i).toDisplayString());
        }
    }
}
